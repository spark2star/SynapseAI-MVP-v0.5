services:
  db:
    image: postgres:15-alpine
    container_name: synapseai_postgres
    environment:
      POSTGRES_DB: emr_db
      POSTGRES_USER: emr_user
      POSTGRES_PASSWORD: emr_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d synapseai_dev" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - synapseai

  redis:
    image: redis:7-alpine
    container_name: synapseai_redis
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - synapseai

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: dev
    container_name: synapseai_backend
    
    environment:
      DATABASE_URL: postgresql://emr_user:emr_password@db:5432/emr_db
      REDIS_URL: redis://redis:6379/0
      ENVIRONMENT: development
      DEBUG: "true"
      SECRET_KEY: dev-secret-key-change-in-development
      JWT_SECRET_KEY: dev-jwt-secret-key-change-in-development
      ENCRYPTION_KEY: dev-encryption-key-32-bytes-long!
      FIELD_ENCRYPTION_KEY: dev-field-encryption-key-32-bytes!
      API_HOST: 0.0.0.0
      API_PORT: 8080
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/app
    command: bash ./scripts/startup.sh
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -fsS http://localhost:8080/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - synapseai

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: dev
    container_name: synapseai_frontend
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8080/api/v1
      NEXT_PUBLIC_WS_URL: ws://localhost:8080
      NEXT_PUBLIC_APP_ENV: development
      NODE_ENV: development
      HOST: 0.0.0.0
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
    command: npm run dev -- -H 0.0.0.0
    depends_on:
      - backend
    networks:
      - synapseai

  pgadmin:
    image: dpage/pgadmin4
    container_name: synapseai_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@synapseai.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    profiles:
      - dev-tools
    networks:
      - synapseai

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:


networks:
  synapseai:
    driver: bridge
